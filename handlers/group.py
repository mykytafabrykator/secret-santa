from aiogram import Bot, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from db import get_pool, is_session_active, set_session_active, clear_participants
from utils import derangement
from handlers.private import is_admin


async def cmd_start_group(message: Message, bot: Bot):
    chat_id = message.chat.id
    if await is_session_active(chat_id):
        await message.answer("–ù–∞—Ä–∞–∑—ñ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è. –°–ø–µ—Ä—à—É –∑–∞–∫—ñ–Ω—á—ñ—Ç—å –∞–±–æ –≤—ñ–¥–º—ñ–Ω—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É.")
        return

    await set_session_active(chat_id, True)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å", callback_data="join")],
        [InlineKeyboardButton(text="üîî–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="end"),
         InlineKeyboardButton(text="‚ÄºÔ∏è–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ])
    await message.answer("ü•∏–£—á–∞—Å–Ω–∏–∫–∏:", reply_markup=keyboard)


async def join_callback(callback_query: CallbackQuery, bot: Bot):
    chat_id = callback_query.message.chat.id
    user = callback_query.from_user
    user_id = user.id

    if not await is_session_active(chat_id):
        await callback_query.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è.", show_alert=True)
        return

    p = await get_pool()
    async with p.acquire() as conn:
        user_row = await conn.fetchrow("SELECT wishlist, started_pm FROM users WHERE user_id = $1", user_id)

    if not user_row or user_row["started_pm"] == 0 or not user_row["wishlist"]:
        await callback_query.answer("–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å–ø–µ—Ä—à—É –ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º —É –ø—Ä–∏–≤–∞—Ç—ñ —Ç–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤—ñ–π wishlist!",
                                    show_alert=True)
        return

    async with p.acquire() as conn:
        p_row = await conn.fetchrow("SELECT user_id FROM participants WHERE chat_id = $1 AND user_id = $2", chat_id,
                                    user_id)
        if p_row:
            await callback_query.answer("–í–∞—Å –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ!", show_alert=True)
            return
        else:
            await conn.execute("INSERT INTO participants (chat_id, user_id) VALUES ($1, $2)", chat_id, user_id)

        rows = await conn.fetch("""
        SELECT u.username
        FROM participants p
        JOIN users u ON p.user_id = u.user_id
        WHERE p.chat_id = $1
        """, chat_id)

    user_list_str = "\n".join([f"- {r['username']}" for r in rows])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å", callback_data="join")],
        [InlineKeyboardButton(text="üîî–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="end"),
         InlineKeyboardButton(text="‚ÄºÔ∏è–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ])
    await callback_query.message.edit_text(
        text=f"ü•∏–£—á–∞—Å–Ω–∏–∫–∏:\n{user_list_str}",
        reply_markup=keyboard
    )
    await callback_query.answer()


async def end_callback(callback_query: CallbackQuery, bot: Bot):
    message = callback_query.message
    if not await is_admin(message, bot):
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é!", show_alert=True)
        return

    chat_id = message.chat.id
    if not await is_session_active(chat_id):
        await callback_query.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.", show_alert=True)
        return

    p = await get_pool()
    async with p.acquire() as conn:
        participants_list = await conn.fetch("""
        SELECT u.user_id, u.username, u.started_pm, u.wishlist
        FROM participants p
        JOIN users u ON p.user_id = u.user_id
        WHERE p.chat_id = $1
        """, chat_id)

    if not participants_list:
        await callback_query.answer("–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É.", show_alert=True)
        return

    user_ids = [row["user_id"] for row in participants_list]
    assigned = derangement(user_ids)
    if not assigned:
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)
        return

    async with p.acquire() as conn:
        for giver_id, receiver_id in zip(user_ids, assigned):
            await conn.execute("UPDATE participants SET assigned_to = $1 WHERE chat_id = $2 AND user_id = $3",
                               receiver_id, chat_id, giver_id)
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–∞–Ω–∏—Ö
        id_to_data = {row["user_id"]: (row["username"], row["wishlist"], row["started_pm"]) for row in
                      participants_list}

    # –†–æ–∑—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for giver_id, receiver_id in zip(user_ids, assigned):
        _, _, giver_started_pm = id_to_data[giver_id]
        receiver_username, receiver_wishlist, _ = id_to_data[receiver_id]

        if giver_started_pm:
            text = f"üéÖüèª–¢–∏ —Ç–∞—î–º–Ω–∏–π –°–∞–Ω—Ç–∞ –¥–ª—è: {receiver_username}\n\n"
            if receiver_wishlist:
                text += f"üéÅ–ô–æ–≥–æ(—ó—ó) wishlist:\n\n{receiver_wishlist}"
            else:
                text += "\nWishlist —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π."
            try:
                await bot.send_message(chat_id=giver_id, text=text)
            except Exception:
                pass

    await set_session_active(chat_id, False)
    await callback_query.message.edit_text("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await callback_query.answer()


async def cancel_callback(callback_query: CallbackQuery, bot: Bot):
    message = callback_query.message
    if not await is_admin(message, bot):
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å–µ—Å—ñ—é!", show_alert=True)
        return

    chat_id = message.chat.id
    if not await is_session_active(chat_id):
        await callback_query.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", show_alert=True)
        return

    await clear_participants(chat_id)
    await set_session_active(chat_id, False)
    await callback_query.message.edit_text("–°–µ—Å—ñ—é –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /start.")
    await callback_query.answer()


def register_group_handlers(dp):
    dp.message.register(cmd_start_group, Command("start"), (F.chat.type == "group") | (F.chat.type == "supergroup"))
    dp.callback_query.register(join_callback, F.data == "join",
                               (F.message.chat.type == "group") | (F.message.chat.type == "supergroup"))
    dp.callback_query.register(end_callback, F.data == "end",
                               (F.message.chat.type == "group") | (F.message.chat.type == "supergroup"))
    dp.callback_query.register(cancel_callback, F.data == "cancel",
                               (F.message.chat.type == "group") | (F.message.chat.type == "supergroup"))
