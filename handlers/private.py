from aiogram import Bot, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from db import get_pool
from states import WishlistStates
from aiogram.fsm.context import FSMContext

async def is_admin(message: Message, bot: Bot) -> bool:
    if message.chat.type not in ("group", "supergroup"):
        return False
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    return member.status in ("administrator", "creator")

async def cmd_start_private(message: Message, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.full_name if message.from_user.full_name else message.from_user.username

    p = await get_pool()
    async with p.acquire() as conn:
        await conn.execute("""
        INSERT INTO users (user_id, username, started_pm) VALUES ($1,$2,1)
        ON CONFLICT (user_id) DO UPDATE SET started_pm=1, username=$2
        """, user_id, username)

    # –ö–Ω–æ–ø–∫–∏: –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ wishlist, –ü—Ä–æ—Ñ—ñ–ª—å, –ú—ñ–π –æ–¥–µ—Ä–∂—É–≤–∞—á
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ wishlist"), KeyboardButton(text="üéí–ü—Ä–æ—Ñ—ñ–ª—å")],
            [KeyboardButton(text="üéÖ–ú—ñ–π –æ–¥–µ—Ä–∂—É–≤–∞—á")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await message.answer(
        "‚ùÑÔ∏è–í—ñ—Ç–∞—é!\n\n‚òÉÔ∏è–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ:",
        reply_markup=keyboard
    )

async def start_wishlist_edit(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π wishlist.\n/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏")
    await state.set_state(WishlistStates.entering)

async def cancel_wishlist(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")

async def save_wishlist(message: Message, state: FSMContext):
    wishlist_text = message.text.strip()
    user_id = message.from_user.id
    p = await get_pool()
    async with p.acquire() as conn:
        await conn.execute("UPDATE users SET wishlist = $1 WHERE user_id = $2", wishlist_text, user_id)
    await state.clear()
    await message.answer("‚ú®–í–∞—à wishlist –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

async def show_profile(message: Message, bot: Bot):
    user_id = message.from_user.id
    p = await get_pool()
    async with p.acquire() as conn:
        user_row = await conn.fetchrow("SELECT wishlist FROM users WHERE user_id = $1", user_id)
        wishlist = user_row["wishlist"] if user_row else None

        parts = await conn.fetch("""
        SELECT p.chat_id, p.assigned_to, u.username AS receiver_username
        FROM participants p
        LEFT JOIN users u ON p.assigned_to = u.user_id
        WHERE p.user_id = $1
        """, user_id)

    profile_text = "üéí–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n"
    profile_text += f"‚ú®–í–∞—à wishlist:\n{wishlist if wishlist else '–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π'}\n\n"

    if parts:
        assigned_info = []
        for part in parts:
            if part["assigned_to"]:
                assigned_info.append(f"–ß–∞—Ç {part['chat_id']}: –≤–∏ –¥–∞—Ä—É—î—Ç–µ {part['receiver_username']}")
        if assigned_info:
            profile_text += "\n".join(assigned_info)
        else:
            profile_text += "–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–∏–ø–∞–≤."
    else:
        profile_text += "–í–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –ø—Ä–∏—î–¥–Ω—É–≤–∞–ª–∏—Å—å –¥–æ –∂–æ–¥–Ω–æ—ó –≥—Ä–∏."

    await message.answer(profile_text)

async def show_assigned_wishlist(message: Message, bot: Bot):
    user_id = message.from_user.id
    p = await get_pool()
    async with p.acquire() as conn:
        rows = await conn.fetch("""
        SELECT p.assigned_to, u2.username AS assigned_name, u2.wishlist AS assigned_wishlist
        FROM participants p
        JOIN users u ON p.user_id = u.user_id
        LEFT JOIN users u2 ON p.assigned_to = u2.user_id
        WHERE p.user_id = $1
        """, user_id)

    if not rows:
        await message.answer("–í–∏ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å –≤ –∂–æ–¥–Ω—ñ–π –≥—Ä—ñ –∞–±–æ —â–µ –Ω—ñ–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    assigned_entries = [r for r in rows if r["assigned_to"] is not None]

    if not assigned_entries:
        await message.answer("–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤–∞–º.")
        return

    assigned_entry = assigned_entries[0]
    assigned_name = assigned_entry["assigned_name"]
    assigned_wishlist = assigned_entry["assigned_wishlist"]

    if assigned_wishlist:
        text = f"üéÖüèª–¢–∏ —Ç–∞—î–º–Ω–∏–π –°–∞–Ω—Ç–∞ –¥–ª—è: {assigned_name}\n\nüéÅ–ô–æ–≥–æ(—ó—ó) wishlist:\n\n{assigned_wishlist}"
    else:
        text = f"–í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {assigned_name}, –∞–ª–µ wishlist –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π."

    await message.answer(text)

async def unknown_private_message(message: Message):
    await message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –∑–∞–ø–∏—Ç.")

def register_private_handlers(dp):
    dp.message.register(cmd_start_private, Command("start"), F.chat.type == "private")
    dp.message.register(start_wishlist_edit, F.text == "‚úçÔ∏è–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ wishlist", F.chat.type == "private")
    dp.message.register(show_profile, F.text == "üéí–ü—Ä–æ—Ñ—ñ–ª—å", F.chat.type == "private")
    dp.message.register(show_assigned_wishlist, F.text == "üéÖ–ú—ñ–π –æ–¥–µ—Ä–∂—É–≤–∞—á", F.chat.type == "private")
    dp.message.register(cancel_wishlist, Command("cancel"), WishlistStates.entering)
    dp.message.register(save_wishlist, F.text, WishlistStates.entering)
    dp.message.register(unknown_private_message, F.chat.type == "private")
